/*===========================================================================
 
  BuildDB.java

  java -classpath target/classes/ me.kevinboone.suntimes.BuildDB

  Copyright (c)2022 Kevin Boone, GPL v3.0

===========================================================================*/

package me.kevinboone.suntimes;
import java.io.*;
import java.util.*;
import java.util.TimeZone;

public class BuildDB
  {
  static private double dmsToDec (boolean neg, String s)
    {
    String sd = "0";
    String sm = "0";
    String ss = "0";

    if (s.length() == 7)
      {
      sd = s.substring (0, 3);
      sm = s.substring (3, 5);
      ss = s.substring (5, 7);
      }
    else if (s.length() == 6)
      {
      sd = s.substring (0, 2);
      sm = s.substring (2, 4);
      ss = s.substring (4, 6);
      }
    else if (s.length() == 5)
      {
      sd = s.substring (0, 3);
      sm = s.substring (3, 5);
      ss = "0"; 
      }
    else if (s.length() == 4)
      {
      sd = s.substring (0, 2);
      sm = s.substring (2, 4);
      ss = "0"; 
      }
    else
      {
      System.out.println ("Malformed number");
      System.exit (0);
      }

    int deg = Integer.parseInt (sd);
    int min = Integer.parseInt (sm);
    int sec = Integer.parseInt (ss);

    double val = deg + min / 60.0 + sec / 3600.0;
    if (neg)
      return -val;
    return val;
    } 

  public static void main (String[] args)
      throws Exception
    {
    String[] _cities = TimeZone.getAvailableIDs();
    List<String> cities = Arrays.asList (_cities);

    FileOutputStream fos = new FileOutputStream 
      (new File ("src/main/java/me/kevinboone/suntimes/City.java"));
    PrintStream ps = new PrintStream (fos);
    FileInputStream fis = new FileInputStream 
      (new File ("/usr/share/zoneinfo/zone.tab"));
    InputStreamReader isr = new InputStreamReader (fis);
    BufferedReader br = new BufferedReader (isr);

    ps.println ("// Do not edit this file by hand");
    ps.println ("package me.kevinboone.suntimes;");
    ps.println ("public class City {");
    ps.println 
      ("  public double lat, longt; public String name; public String code;");
    ps.println ("  public City (String code, String name, double lat, double longt) {");
    ps.println ("    this.longt = longt; this.lat = lat; ");
    ps.println ("    this.name = name; this.code = code; ");
    ps.println ("  }");
    ps.println ("  public static City[] list = {");

    String line = br.readLine();
    do
      {
      if (line.charAt(0) != '#')
        {
        System.out.println ("Processing zone.tab line: " + line);
        String[] a = line.split ("\\s+", 4); 
        String code = a[0];
        String latlong = a[1];
        String city = a[2];

        boolean latneg = false;
        boolean longneg = false;
        if (latlong.charAt(0) == '-')
          latneg = true;
        latlong = latlong.substring (1);
	
        String slat = "", slong = "";
        int pos = latlong.indexOf ('-');
        if (pos >= 0)
          {
          slat = latlong.substring (0, pos);
          slong = latlong.substring (pos + 1);
          longneg = true; 
          }
        else
          {
          pos = latlong.indexOf ('+');
          if (pos >= 0)
            {
            slat = latlong.substring (0, pos);
            slong = latlong.substring (pos + 1);
            longneg = false; 
            }
          }

        if (cities.contains (city))
          {
          System.out.println ("City " + city + "found in Java");
          double lat = dmsToDec (latneg, slat);
          double longt = dmsToDec (longneg, slong);

          ps.println ("new City (\"" + code + "\",\"" + 
             city.replace ("/", ":") + "\"," 
             + lat + "," + longt + "),");
          }
        else
          System.out.println ("City " + city + " not found in Java");
       
        }
      line = br.readLine();
      } while (line != null);
    ps.println ("  };");
    ps.println ("}");
    }

  }


